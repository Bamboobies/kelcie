<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flappy Shrimp</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            font-family: Arial, sans-serif;
        }
        #startScreen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: white;
            z-index: 10;
        }
        #startButton {
            padding: 10px 20px;
            font-size: 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        #startButton:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <!-- Start Screen -->
    <div id="startScreen">
        <h1>Flappy Shrimp</h1>
        <button id="startButton">Start Game</button>
        <p>Tap or press Space to flap!</p>
    </div>

    <!-- Phaser Game Container -->
    <div id="gameContainer"></div>

    <!-- Include Phaser from CDN -->
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>

    <script>
        // Game variables
        let bird, pipes, scoreText, gameOver, score, startScreen;

        // Phaser game configuration
        const config = {
            type: Phaser.AUTO,
            width: 400,
            height: 600,
            parent: 'gameContainer',
            physics: {
                default: 'arcade',
                arcade: {
                    gravity: { y: 500 },
                    debug: false
                }
            },
            scene: {
                preload: preload,
                create: create,
                update: update
            }
        };

        // Initialize Phaser game
        const game = new Phaser.Game(config);

        // Preload assets
        function preload() {
            this.load.image('background', 'https://i.imgur.com/3e5z5Qz.png'); // Replace with your background image
            this.load.image('shrimp', 'shrimp.png'); // Replace with your shrimp image
            this.load.image('pipe', 'https://i.imgur.com/1Q7Q7Q7.png'); // Replace with your pipe image
        }

        // Create game objects
        function create() {
            // Add background
            this.add.image(200, 300, 'background');

            // Add shrimp
            bird = this.physics.add.sprite(100, 300, 'shrimp');
            bird.setCollideWorldBounds(true);

            // Add pipes group
            pipes = this.physics.add.group();

            // Add score text
            scoreText = this.add.text(20, 20, 'Score: 0', { fontSize: '24px', fill: '#fff' });

            // Start screen
            startScreen = document.getElementById('startScreen');
            startScreen.style.display = 'block';

            // Start game button
            document.getElementById('startButton').addEventListener('click', () => {
                startScreen.style.display = 'none';
                startGame();
            });

            // Touch controls
            this.input.on('pointerdown', flap);

            // Keyboard controls
            this.input.keyboard.on('keydown-SPACE', flap);
        }

        // Update game logic
        function update() {
            if (gameOver) return;

            // Check for collisions with pipes
            this.physics.overlap(bird, pipes, () => {
                gameOver = true;
                this.physics.pause();
                this.add.text(100, 300, 'Game Over!', { fontSize: '40px', fill: '#ff0000' });
            });

            // Move pipes
            pipes.children.iterate((pipe) => {
                pipe.setVelocityX(-200);

                // Increase score when shrimp passes a pipe
                if (pipe.x < bird.x && !pipe.passed) {
                    pipe.passed = true;
                    score++;
                    scoreText.setText(`Score: ${score}`);

                    // Redirect if score is 10 or more
                    if (score >= 10) {
                        gameOver = true;
                        this.physics.pause();
                        this.add.text(50, 250, 'Congratulations!', { fontSize: '40px', fill: '#00ff00' });
                        this.add.text(80, 300, 'Redirecting...', { fontSize: '30px', fill: '#00ff00' });

                        // Redirect to kelcie.net/valentines after 3 seconds
                        setTimeout(() => {
                            window.location.href = 'https://kelcie.net/valentines';
                        }, 3000);
                    }
                }

                // Remove off-screen pipes
                if (pipe.x < -50) {
                    pipes.remove(pipe, true, true);
                }
            });
        }

        // Start the game
        function startGame() {
            gameOver = false;
            score = 0;
            scoreText.setText('Score: 0');
            bird.setVelocity(0, 0);
            bird.y = 300;

            // Spawn pipes
            this.time.addEvent({
                delay: 1500,
                callback: spawnPipe,
                callbackScope: this,
                loop: true
            });
        }

        // Spawn a pipe
        function spawnPipe() {
            const gap = 150;
            const pipeHeight = Phaser.Math.Between(100, 400);
            const upperPipe = pipes.create(400, pipeHeight - gap, 'pipe');
            const lowerPipe = pipes.create(400, pipeHeight + gap, 'pipe');
            upperPipe.setVelocityX(-200);
            lowerPipe.setVelocityX(-200);
            upperPipe.passed = false;
            lowerPipe.passed = false;
        }

        // Make the shrimp flap
        function flap() {
            if (!gameOver) {
                bird.setVelocityY(-300);
            }
            if (gameOver) {
                startGame();
            }
        }
    </script>
</body>
</html>
