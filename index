<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Flappy Shrimp</title>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: #70c5ce;
            font-family: Arial, sans-serif;
        }
        canvas {
            display: block;
            margin: 0 auto;
            background-color: #70c5ce;
        }
        #startScreen {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            text-align: center;
            color: white;
        }
        #startButton {
            padding: 10px 20px;
            font-size: 20px;
            background-color: #4CAF50;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
        #startButton:hover {
            background-color: #45a049;
        }
    </style>
</head>
<body>
    <canvas id="gameCanvas" width="400" height="600"></canvas>

    <!-- Start Screen -->
    <div id="startScreen">
        <h1>Flappy Shrimp</h1>
        <button id="startButton">Start Game</button>
        <p>Tap or press Space to flap!</p>
    </div>

    <script>
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const startScreen = document.getElementById('startScreen');

        // Game variables
        let bird, pipes, gameOver, score, gameStarted;
        const gravity = 0.5;
        const jumpStrength = -8;
        const pipeGap = 150;
        const pipeWidth = 50;
        const pipeSpeed = 2;

        // Load shrimp image
        const birdImage = new Image();
        birdImage.src = 'https://github.com/Bamboobies/kelcie/blob/9d5e4d2741da11e1d0aa376929e35cfa57edb028/NFT_Shrimp_float%20(1).png'; // Replace 'shrimp.png' with your shrimp image file

        // Initialize game
        function init() {
            bird = {
                x: 50,
                y: canvas.height / 2,
                width: 40,
                height: 30,
                velocity: 0
            };
            pipes = [];
            gameOver = false;
            gameStarted = false;
            score = 0;
            spawnPipe();
        }

        // Draw the shrimp
        function drawBird() {
            ctx.drawImage(birdImage, bird.x, bird.y, bird.width, bird.height);
        }

        // Draw pipes
        function drawPipes() {
            ctx.fillStyle = 'green';
            pipes.forEach(pipe => {
                ctx.fillRect(pipe.x, 0, pipeWidth, pipe.topHeight);
                ctx.fillRect(pipe.x, canvas.height - pipe.bottomHeight, pipeWidth, pipe.bottomHeight);
            });
        }

        // Spawn a new pipe
        function spawnPipe() {
            const topHeight = Math.random() * (canvas.height - pipeGap - 100) + 50;
            const bottomHeight = canvas.height - topHeight - pipeGap;
            pipes.push({
                x: canvas.width,
                topHeight: topHeight,
                bottomHeight: bottomHeight,
                passed: false
            });
        }

        // Update game state
        function update() {
            if (gameOver || !gameStarted) return;

            // Update shrimp
            bird.velocity += gravity;
            bird.y += bird.velocity;

            // Update pipes
            for (let i = pipes.length - 1; i >= 0; i--) {
                pipes[i].x -= pipeSpeed;

                // Check for collisions
                if (
                    bird.x < pipes[i].x + pipeWidth &&
                    bird.x + bird.width > pipes[i].x &&
                    (bird.y < pipes[i].topHeight || bird.y + bird.height > canvas.height - pipes[i].bottomHeight)
                ) {
                    gameOver = true;
                }

                // Increase score if pipe is passed
                if (!pipes[i].passed && bird.x > pipes[i].x + pipeWidth) {
                    pipes[i].passed = true;
                    score++;

                    // Check if score is 10 or more
                    if (score >= 10) {
                        gameOver = true;
                        ctx.fillStyle = 'white';
                        ctx.font = '40px Arial';
                        ctx.fillText('Congratulations!', canvas.width / 2 - 120, canvas.height / 2 - 20);
                        ctx.fillText('Redirecting...', canvas.width / 2 - 100, canvas.height / 2 + 20);

                        // Redirect to kelcie.net/valentines after 3 seconds
                        setTimeout(() => {
                            window.location.href = 'https://kelcie.net/valentines';
                        }, 3000);
                    }
                }

                // Remove off-screen pipes
                if (pipes[i].x + pipeWidth < 0) {
                    pipes.splice(i, 1);
                }
            }

            // Spawn new pipes
            if (pipes.length === 0 || pipes[pipes.length - 1].x < canvas.width - 200) {
                spawnPipe();
            }

            // Check for shrimp out of bounds
            if (bird.y + bird.height > canvas.height || bird.y < 0) {
                gameOver = true;
            }
        }

        // Draw the game
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw shrimp
            drawBird();

            // Draw pipes
            drawPipes();

            // Draw score
            ctx.fillStyle = 'white';
            ctx.font = '24px Arial';
            ctx.fillText(`Score: ${score}`, 10, 30);

            // Draw game over message
            if (gameOver && score < 10) {
                ctx.fillStyle = 'red';
                ctx.font = '40px Arial';
                ctx.fillText('Game Over!', canvas.width / 2 - 100, canvas.height / 2);
            }
        }

        // Game loop
        function gameLoop() {
            update();
            draw();
            if (!gameOver && gameStarted) requestAnimationFrame(gameLoop);
        }

        // Handle user input
        function flap() {
            if (!gameOver && gameStarted) {
                bird.velocity = jumpStrength;
            }
            if (gameOver && score < 10) {
                init();
                gameStarted = true;
                startScreen.style.display = 'none';
            }
        }

        // Keyboard controls
        document.addEventListener('keydown', (e) => {
            if (e.code === 'Space') {
                flap();
            }
        });

        // Touch controls
        canvas.addEventListener('touchstart', () => {
            flap();
        });

        // Start game button
        document.getElementById('startButton').addEventListener('click', () => {
            init();
            gameStarted = true;
            startScreen.style.display = 'none';
            gameLoop();
        });

        // Initialize the game
        init();
    </script>
</body>
</html>
